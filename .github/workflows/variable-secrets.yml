name: Exploring Variables and Secrets

on: 
# workflow_dispatch:    #manually trigger workflow

  push

    #########To trigger action on cron job #########
# schedule:
#   - cron: "*/1 * * * *"    #runs every minute of an hour

##########For more triggers -> Events that trigger workflows Doc ##################

env:
    CONTAINER_REGISTRY: docker.io
    IMAGE_NAME: github-actions-nginx

############################without using env variable#######################################
#jobs: 
#    docker:
#        runs-on: ubuntu-latest
#        steps:
#            - name: Docker Build
#              run: docker build -t docker.io/dockerUsername/imageName:latest
#
#            - name: Docker Login
#              run: docker login --username=dockerUsername --password=s3cUrePaSsw0rd
#
#            - name: Docker Publish
#              run: docker push docker.io/dockerUsername/imageName:latest
#
#    deploy:
#        needs: docker
#        runs-on: ubuntu-latest
#        steps:
#            - name: Docker Run
#              run: docker run -d -p 8080:80 docker.io/dockerUsername/imageName:latest 

#########################using env variables at workflow level###############################

jobs: 
    docker:
        runs-on: ubuntu-latest
        steps:
            - name: Docker Build
              run: echo docker build -t $CONTAINER_REGISTRY/${{ vars.DOCKER_USERNAME }}/$IMAGE_NAME:latest

            - name: Docker Login
              run: echo docker login --username=${{ vars.DOCKER_USERNAME }} --password=${{ secrets.DOCKER_PASSWORD  }}

            - name: Docker Publish
              run: echo docker push $CONTAINER_REGISTRY/${{ vars.DOCKER_USERNAME }}/$IMAGE_NAME:latest

    deploy:
        needs: docker
        concurrency: 
          group: production-deployment  #name of the concurrency group
          cancel-in-progress: true      #cancels any currently running job in this concurrency group
        runs-on: ubuntu-latest
        steps:
            - name: Docker Run
              timeout-minutes: 1     #terminates the task after 1 minute.(can be given at job level to terminate all tasks within that job.)
              run: |
                echo docker run -d -p 8080:80 $CONTAINER_REGISTRY/${{ vars.DOCKER_USERNAME }}/$IMAGE_NAME:latest 
                sleep 500s